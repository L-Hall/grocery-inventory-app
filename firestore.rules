rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRequiredInventoryFields() {
      return request.resource.data.keys().hasAll(['name', 'quantity', 'unit', 'category']) &&
             request.resource.data.name is string &&
             request.resource.data.quantity is number &&
             request.resource.data.quantity >= 0 &&
             request.resource.data.unit is string &&
             request.resource.data.category is string;
    }
    
    function hasRequiredCategoryFields() {
      return request.resource.data.keys().hasAll(['name', 'color', 'icon']) &&
             request.resource.data.name is string &&
             request.resource.data.color is string &&
             request.resource.data.icon is string;
    }
    
    function hasRequiredListFields() {
      return request.resource.data.keys().hasAll(['name', 'status', 'items']) &&
             request.resource.data.name is string &&
             request.resource.data.status in ['active', 'completed', 'archived'] &&
             request.resource.data.items is list;
    }
    
    // Users can only access their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
                      request.resource.data.email is string &&
                      request.resource.data.name is string;
      allow delete: if false; // Prevent accidental user deletion
      
      // Allow read/write to user's inventory subcollection
      match /inventory/{itemId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && hasRequiredInventoryFields();
        allow update: if isOwner(userId) && hasRequiredInventoryFields();
        allow delete: if isOwner(userId);
      }
      
      // Allow read/write to user's categories subcollection
      match /categories/{categoryId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && hasRequiredCategoryFields();
        allow update: if isOwner(userId) && hasRequiredCategoryFields();
        allow delete: if isOwner(userId);
      }
      
      // Allow read/write to user's grocery lists subcollection
      match /grocery_lists/{listId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && hasRequiredListFields();
        allow update: if isOwner(userId) && hasRequiredListFields();
        allow delete: if isOwner(userId);
      }
      
      // Allow read/write to user's purchase history subcollection
      match /purchase_history/{purchaseId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
  }
}